package manager;

import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import ru.yandex.javacourse.manager.InMemoryTaskManager;
import ru.yandex.javacourse.manager.Managers;
import ru.yandex.javacourse.tasks.Epic;
import ru.yandex.javacourse.tasks.Status;
import ru.yandex.javacourse.tasks.Subtask;
import ru.yandex.javacourse.tasks.Task;

import java.util.ArrayList;


public class InMemoryTaskManagerTest {
    private InMemoryTaskManager inMemoryTaskManager;


    @BeforeEach
    public void createInMemoryTaskManager() {
        inMemoryTaskManager = (InMemoryTaskManager) Managers.getDefault();
    }

    @Test
    public void confirmTheEqualityOfObjectsWithTheSameID() {
        Task task = new Task("", "", Status.NEW);
        inMemoryTaskManager.addTask(task);

        Task task2 = new Task("", "", Status.NEW);
        inMemoryTaskManager.addTask(task2);

        assertEquals(task, inMemoryTaskManager.getTask(task.getId()));
        assertNotEquals(task, inMemoryTaskManager.getTask(task2.getId()));
    }

    @Test
    public void confirmTheEqualityOfChildObjectsWithTheSameID() {
        Epic epic = new Epic("", "", new ArrayList<Integer>(), inMemoryTaskManager);
        Subtask subtask = new Subtask("", "", Status.NEW, epic.getId());
        inMemoryTaskManager.addTask(epic);
        inMemoryTaskManager.addTask(subtask);

        Epic epic2 = new Epic("", "", new ArrayList<Integer>(), inMemoryTaskManager);
        Subtask subtask2 = new Subtask("", "", Status.NEW, epic.getId());
        inMemoryTaskManager.addTask(epic2);
        inMemoryTaskManager.addTask(subtask2);

        assertEquals(epic, inMemoryTaskManager.getTask(epic.getId()));
        assertEquals(subtask, inMemoryTaskManager.getTask(subtask.getId()));

        assertNotEquals(epic2, inMemoryTaskManager.getTask(epic.getId()));
        assertNotEquals(subtask2, inMemoryTaskManager.getTask(subtask.getId()));
    }

    @Test
    public void confirmTheInabilityToAddAnEpicToOneself() {
        Epic epic = new Epic("", "", new ArrayList<Integer>(), inMemoryTaskManager);
        inMemoryTaskManager.addTask(epic);
        epic.addSubtask(epic.getId());

        ArrayList<Integer> expected = new ArrayList<Integer>();

        assertEquals(expected, epic.getSubtasksIDs());
    }

    @Test
    public void confirmTheInabilityToAddSubtaskAsEpicToOneself() {
        Subtask subtask = new Subtask("", "", Status.NEW);
        subtask.setEpicID(subtask.getId());
        inMemoryTaskManager.addTask(subtask);

        int expected = -1;

        assertEquals(expected, subtask.getEpicID());
    }

    @Test
    public void ensureThatManagersAlwaysReturnsInitializedInstances() {
        assertNotNull(Managers.getDefault());
    }

    @Test
    public void verifyThatInMemoryTaskManagerCorrectlyAddsDifferentTaskTypesAndCanFindThemByID() {
        Task task = new Task("", "", Status.NEW);
        inMemoryTaskManager.addTask(task);

        Epic epic = new Epic("", "", new ArrayList<Integer>(), inMemoryTaskManager);
        inMemoryTaskManager.addTask(epic);

        Subtask subtask = new Subtask("", "", Status.NEW, epic.getId());
        epic.addSubtask(subtask.getId());
        inMemoryTaskManager.addTask(subtask);

        assertEquals(task, inMemoryTaskManager.getTask(task.getId()));
        assertEquals(epic, inMemoryTaskManager.getTask(epic.getId()));
        assertEquals(subtask, inMemoryTaskManager.getTask(subtask.getId()));

        assertNotEquals(epic, inMemoryTaskManager.getTask(subtask.getId()));
    }

    @Test
    public void checkThatTasksWithAssignedIDAndAutoGeneratedIdDoNotConflictInsideManager() {
        Task task = new Task("", "", Status.NEW);
        inMemoryTaskManager.addTask(task);

        Task task2 = new Task("", "", Status.NEW, 14);
        inMemoryTaskManager.addTask(task);

        Task task3 = new Task("", "", Status.NEW);
        inMemoryTaskManager.addTask(task);

        assertNotEquals(task, task2);
        assertNotEquals(task2, task3);
    }

    @Test
    public void createTestToVerifyImmutabilityOfTaskInManagerUponAdding() {
        Task task = new Task("", "", Status.NEW);
        inMemoryTaskManager.addTask(task);

        assertEquals(task, inMemoryTaskManager.getTask(task.getId()));
    }

    @Test
    public void ensureThatTasksAddedToHistoryManagerPreservePreviousVersionAndDataIntegrity() {
        Task task = new Task("", "", Status.NEW);
        inMemoryTaskManager.addTask(task);

        inMemoryTaskManager.getTask(task.getId());
        task.updateStatus(Status.DONE);
        ArrayList<Task> tasks = inMemoryTaskManager.getInMemoryHistory();

        assertNotEquals(task.getStatus(), tasks.getFirst().getStatus());
    }

}