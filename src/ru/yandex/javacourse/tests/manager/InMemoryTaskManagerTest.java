package manager;

import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import ru.yandex.javacourse.manager.InMemoryTaskManager;
import ru.yandex.javacourse.manager.Managers;
import ru.yandex.javacourse.tasks.Epic;
import ru.yandex.javacourse.tasks.Status;
import ru.yandex.javacourse.tasks.Subtask;
import ru.yandex.javacourse.tasks.Task;

import java.util.ArrayList;


public class InMemoryTaskManagerTest {
    private InMemoryTaskManager inMemoryTaskManager;

    @BeforeEach
    public void createInMemoryTaskManager() {
        inMemoryTaskManager = (InMemoryTaskManager) Managers.getDefault();
    }

    @Test
    @DisplayName("Проверка на возможность добавления задач различных типов в inMemoryTaskManager и их корректного " +
            "поиска по Id")
    public void ThatInMemoryTaskManager_CorrectlyAddsDifferentTaskTypes_And_CanFindThemByIdTest() {
        Task task = new Task("Task", "Task description", Status.NEW);
        inMemoryTaskManager.addTask(task);

        Epic epic = new Epic("Epic", "Epic description", new ArrayList<Integer>(), inMemoryTaskManager);
        inMemoryTaskManager.addTask(epic);

        Subtask subtask = new Subtask("Subtask", "Subtask description", Status.NEW, epic.getId());
        epic.addSubtask(subtask.getId());
        inMemoryTaskManager.addTask(subtask);

        assertEquals(task, inMemoryTaskManager.getTask(task.getId()));
        assertEquals(epic, inMemoryTaskManager.getTask(epic.getId()));
        assertEquals(subtask, inMemoryTaskManager.getTask(subtask.getId()));

        assertNotEquals(epic, inMemoryTaskManager.getTask(subtask.getId()));
    }

    @Test
    @DisplayName("Проверка на неконфликтность задач с заданным Id и сгенерированным автоматически")
    public void TasksWithAssignedID_And_AutoGeneratedId_DoNotConflictTest() {
        Task task = new Task("Task", "Task description", Status.NEW);
        inMemoryTaskManager.addTask(task);

        Task task2 = new Task("Task", "Task description", Status.NEW, 14);
        inMemoryTaskManager.addTask(task);

        Task task3 = new Task("Task", "Task description", Status.NEW);
        inMemoryTaskManager.addTask(task);

        assertNotEquals(task, task2);
        assertNotEquals(task2, task3);
    }

    @Test
    @DisplayName("Проверка на неизменяемость задачи при добавлении в inMemoryTaskManager")
    public void equalsOfTask_And_TaskInInMemoryTaskManager() {
        Task task = new Task("Task", "Task description", Status.NEW);
        inMemoryTaskManager.addTask(task);

        assertEquals(task, inMemoryTaskManager.getTask(task.getId()));
    }
}